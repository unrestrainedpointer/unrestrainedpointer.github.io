<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Stream in Java</title>
    <link href="/2022/04/12/Stream-in-Java/"/>
    <url>/2022/04/12/Stream-in-Java/</url>
    
    <content type="html"><![CDATA[<ol><li>流是什么：<ol><li>流是支持数据处理操作的源生成的元素序列，源可以是数组、文件、集合、函数。流不是数据结构并不保存数据，它的主要目的在于计算。</li></ol></li><li>流的生成：<ol><li>通过集合生成：<code>Stream&lt;Integer&gt; steam=new ArrayList&lt;Integer&gt;().stream();</code> </li><li>通过数组生成：<code>IntStream stream=Arrays.stream(new int[]&#123;1,2,3&#125;);</code></li><li>通过值生成：<code>Stream&lt;Integer&gt; stream=Stream.of(1,2,3,4,5,6);</code></li><li>通过文件生成：<code>Stream&lt;Integer&gt; stream=Files.lines(Paths.get(&quot;data.txt&quot;), Charset.defaultCharset());</code></li><li>通过函数生成：<code>Stream&lt;Integer&gt; stream=Stream.iterate(0, n-&gt;n+2).limit(5);</code>iterate()方法 接受两个参数，第一个是初始化值，第二个为进行的函数操作，因为iterate生成的是无限流，通过limit方法对流进行了截断；</li><li>generator：<code>Stream&lt;Double&gt; stream=Stream.generate(Math::random).limit(5);</code></li></ol></li><li>流的操作类型：<ol><li><p>中间操作：</p><ol><li>filter：条件筛选  <figure class="highlight apache"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">List</span>&lt;Integer&gt; list=Arrays.asList(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>);<br><span class="hljs-attribute">Stream</span>&lt;Integer&gt; stream=list.stream().filter(i-&gt;i&gt;<span class="hljs-number">3</span>);<br><span class="hljs-attribute">result</span>:<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span><br></code></pre></td></tr></table></figure></li><li>distinct：去除重复元素；</li><li>limit：返回指定流的个数；</li><li>skip：跳过流中的元素；</li><li>map：流映射——将接受的元素映射为另一个元素  <figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-built_in">List</span><span class="hljs-operator">&lt;</span><span class="hljs-built_in">String</span><span class="hljs-operator">&gt;</span> <span class="hljs-variable">list</span><span class="hljs-operator">=</span><span class="hljs-built_in">Arrays</span><span class="hljs-operator">.</span><span class="hljs-variable">asList</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;Java 8&quot;</span><span class="hljs-operator">,</span><span class="hljs-string">&quot;Lambdas&quot;</span><span class="hljs-operator">,</span><span class="hljs-string">&quot;In&quot;</span><span class="hljs-operator">,</span><span class="hljs-string">&quot;Action&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><br><span class="hljs-built_in">List</span><span class="hljs-operator">&lt;</span><span class="hljs-built_in">Integer</span><span class="hljs-operator">&gt;</span> <span class="hljs-variable">length</span><span class="hljs-operator">=</span><span class="hljs-variable">list</span><span class="hljs-operator">.</span><span class="hljs-variable">stream</span><span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-operator">.</span><span class="hljs-variable">map</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">String</span><span class="hljs-string">::length</span><span class="hljs-punctuation">)</span><span class="hljs-operator">.</span><span class="hljs-variable">collect</span><span class="hljs-punctuation">(</span><span class="hljs-variable">Collectors</span><span class="hljs-operator">.</span><span class="hljs-variable">toList</span><span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><br><span class="hljs-variable">result</span><span class="hljs-operator">:</span><span class="hljs-punctuation">[</span><span class="hljs-number">6</span><span class="hljs-operator">,</span><span class="hljs-number">7</span><span class="hljs-operator">,</span><span class="hljs-number">2</span><span class="hljs-operator">,</span><span class="hljs-number">6</span><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure></li><li>flatMap：流转换——将一个流中的每个值都转换为另一个流；</li><li>allMatch：匹配所有元素  <figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">List&lt;Integer&gt; <span class="hljs-built_in">list</span>=<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Arrays</span>.</span></span><span class="hljs-keyword">as</span><span class="hljs-constructor">List(1,2,3,4,5)</span>;<br><span class="hljs-built_in">list</span>.stram<span class="hljs-literal">()</span>.all<span class="hljs-constructor">Match(<span class="hljs-params">i</span>-&gt;<span class="hljs-params">i</span>&gt;3)</span>;<br>result:<span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure></li><li>anyMatch：匹配一个元素</li><li>noneMatch：全部不匹配</li></ol></li><li><p>终端操作：</p><ol><li>count：计算流中元素个数；</li><li>findFirst：查找第一个；</li><li>findAny：随机查找一个；</li><li>reduce：将流中的元素组合<ol><li>用于求和<code>int sum=list.stream().reduce(0, Integer::sum);</code></li></ol></li><li>min&#x2F;max：获取最大最小值；</li><li>sum：求和；</li><li>averagingXXX：求平均值；</li><li>forEach：遍历</li><li>joining拼接流中的元素 <figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-built_in">String</span> result=<span class="hljs-built_in">list</span>.stream().<span class="hljs-built_in">map</span>(<span class="hljs-built_in">String</span><span class="hljs-type">::toLowerCase</span>).collect(Collectors.joining(<span class="hljs-string">&quot;-&quot;</span>));<br></code></pre></td></tr></table></figure></li></ol></li></ol></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Conputer Science, Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Recursion and iteration</title>
    <link href="/2022/04/10/Recursion-and-iteration/"/>
    <url>/2022/04/10/Recursion-and-iteration/</url>
    
    <content type="html"><![CDATA[<figure class="highlight markdown"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">156.</span> 给你一个二叉树的根节点 root ，请你将此二叉树上下翻转，并返回新的根节点。<br><br>你可以按下面的步骤翻转一棵二叉树：<br><br><span class="hljs-code">    原来的左子节点变成新的根节点</span><br><span class="hljs-code">    原来的根节点变成新的右子节点</span><br><span class="hljs-code">    原来的右子节点变成新的左子节点</span><br><span class="hljs-code"></span><br>上面的步骤逐层进行。题目数据保证每个右节点都有一个同级节点（即共享同一父节点的左节点）且不存在子节点。<br><br></code></pre></td></tr></table></figure><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs fsharp"><span class="hljs-keyword">class</span> Solution &#123;<br>    <span class="hljs-keyword">public</span> TreeNode upsideDownBinaryTree(TreeNode root) &#123;<br>        <span class="hljs-keyword">if</span>(root<span class="hljs-operator">==</span><span class="hljs-literal">null</span>)<br>            <span class="hljs-keyword">return</span> root;<br>        TreeNode res<span class="hljs-operator">=</span><span class="hljs-keyword">new</span> TreeNode(root.<span class="hljs-keyword">val</span>);<br>        <span class="hljs-keyword">while</span>(root.left<span class="hljs-operator">!=</span><span class="hljs-literal">null</span>)&#123;<br>            res<span class="hljs-operator">=</span>root.right<span class="hljs-operator">!=</span><span class="hljs-literal">null</span><span class="hljs-operator">?</span><span class="hljs-keyword">new</span> TreeNode(root.left.<span class="hljs-keyword">val</span>, <span class="hljs-keyword">new</span> TreeNode<br>                (root.right.<span class="hljs-keyword">val</span>), res)<span class="hljs-operator">:</span><span class="hljs-keyword">new</span> TreeNode(root.left.<span class="hljs-keyword">val</span>, <span class="hljs-literal">null</span>,<br>                res);<br>            root<span class="hljs-operator">=</span>root.left;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>受本题启发在这里总结关于迭代和递归过程中问题规模递减的顺序和迭代&#x2F;递归过程顺序的关系。</p><ol><li>对于本而言考虑这组输入：<code>root = [1,2,3,4,5]</code>；</li><li>本题问题规模递减的顺序是：<ol><li>生成子树<code>[2,3,1]</code>；</li><li>生成子树<code>[4,5,2,null,null,3,1]</code>；</li></ol></li><li>由(2)可知，问题解决的顺序与遍历的顺序是相同的，都是从前往后&#x3D;&gt;迭代解决；</li></ol><p>在来考虑递归的解决顺序：</p><ol><li><p>自顶向下的递归：当前问题在被遍历到的时候就已经计算进答案中；</p><ol><li>问题的解决顺序与遍历的顺序是相同的；</li></ol></li><li><p>自底向上的递归：当前问题在子问题解决的基础上解决，因此递归到更小的子问题然后根据更小子问题的返回值解决当前问题；</p><ol><li>解决问题的顺序和遍历的顺序相反；</li></ol></li><li><p>(1)和(2)两种递归的区别：</p><ol><li>有返回值的情况：<ul><li>自顶向下return recursion(n-1)——问题规模递减到最小时可以得到最终的答案，返回上一层时不需要做进一步处理;</li><li>自底向上return f(recursion(n-1));——问题规模减小到最小时可以得到规模最小的子问题答案，返回上一层需要处理后才能得到高层次的答案；</li></ul></li><li>没有返回值的情况：<ul><li>自顶向下recursion(n-1);</li><li>自底向上由于需要子问题的结果作为当前问题的结果因此必须有返回值；</li><li>但是有一个特例，当传入引用类型的数据作为参数时，答案可以记录在这个引用变量里；</li></ul></li></ol></li><li><p>分析二叉树深度优先搜索的递归过程：</p> <figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-built_in">public</span> <span class="hljs-type">void</span> recursion(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> depth, <span class="hljs-type">boolean</span>[] isValid, Deque&lt;<span class="hljs-type">Integer</span>&gt; <span class="hljs-type">path</span>, List&lt;List&lt;<span class="hljs-type">Integer</span>&gt;&gt; res)&#123;<br>    <span class="hljs-keyword">if</span>(depth==nums.length)&#123;<br>        res.<span class="hljs-keyword">add</span>(<span class="hljs-built_in">new</span> ArrayList(<span class="hljs-type">path</span>));<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;nums.length;i++)&#123;<br>        <span class="hljs-keyword">if</span>(!isValid[i])&#123;<br>            <span class="hljs-type">path</span>.addLast(nums[i]);<br>            isValid[i]=<span class="hljs-keyword">false</span>;<br>            recursion(nums, depth+<span class="hljs-number">1</span>, isValid, <span class="hljs-type">path</span>, res);<br>            isValid[i]=<span class="hljs-keyword">true</span>;<br>            <span class="hljs-type">path</span>.removeLast();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>这个过程中不止涉及一个递归过程，循环的每一个分支都是一个递归过程，每个递归过程中递归到最后直接得到答案，因此每个分支的递归过程都是自顶向下的；</li><li>再看循环过程，循环过程的语义是选择，也就是操作树的分支；</li><li>本题是有分支的递归，两个分支具有相同的原问题，因此本题是自顶向下递归的变种，本质上还是自顶向下的递归；</li></ol></li><li><p>回头考虑156题，根据其问题规模递减的顺序和遍历顺序应该采用自顶向下的递归，因此由当前问题进入下一问题后得到的应该是最终的答案，即采用return recursion(n-1);</p>   <figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">public TreeNode recursion(TreeNode root, TreeNode right)&#123;<br>    <span class="hljs-keyword">if</span>(root==null)<br>     return right;<br>    <br>    TreeNode left=root.right!=null?<span class="hljs-keyword">new</span> <span class="hljs-constructor">TreeNode(<span class="hljs-params">root</span>.<span class="hljs-params">right</span>.<span class="hljs-params">val</span>)</span>:null;<br>    return recursion(root.left, <span class="hljs-keyword">new</span> <span class="hljs-constructor">TreeNode(<span class="hljs-params">root</span>.<span class="hljs-params">right</span>.<span class="hljs-params">val</span>, <span class="hljs-params">left</span>, <span class="hljs-params">right</span>)</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>   本文中对于递归不同种类的代码形式是重要的，可以帮助我们很快的组织代码；</p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Computer Science</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Speculation</title>
    <link href="/2022/04/10/Speculation/"/>
    <url>/2022/04/10/Speculation/</url>
    
    <content type="html"><![CDATA[<ol><li><p>什么是思辨？从一个方形桌子说起。当我们从方桌转向方形的时候，我们已经在试图把方桌概念中的经验性内容——桌子剔除了，剩下的就是作为形的性质的方。</p></li><li><p>当我们进入性质领域——一个比经验领域更加抽象的领域时，我们可以去追问方形和其他形之间的关系，那么就进入了几何学了。</p></li><li><p>但如果我们继续之前的思维方式——继续剔除概念中的经验性的东西，那么我们就会继续对方形进行解构从而试图进入纯粹理性的区域——思辨；</p></li><li><p>方形又是什么呢？由四条相等的线段组成的封闭的平面图形。</p></li><li><p>如果以(4)中的定义来展开分析就会得到下面的方形的本质中的因素：</p><ol><li>作为我们空间观念表达方式的抽象线条；</li><li>抽象线条的可度量性和以此为根据的可判等性；</li></ol></li><li><p>根据(5)中的结论我们可以继续追问：我们的空间观念中又包含了哪些经验性因素呢？抽象线条的可度量性的根据又从哪里来呢？</p></li><li><p>对于(6)中的追问我目前没有能力回答，因此暂时断言空间观念和空间的可度量性来源于理性的规定，即这些都是理性的组成部分；</p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Speculation</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Galois Theroy(1)</title>
    <link href="/2022/04/08/Galois-Theroy/"/>
    <url>/2022/04/08/Galois-Theroy/</url>
    
    <content type="html"><![CDATA[<ol><li><p>什么是对称？</p><p>为了获得这种艾多斯，我们从几个例子进行直观：</p><ul><li>正方形是对称的；</li><li>物理定律是对称的；</li><li>多项式方程根的加法和乘法的结果是对称的；</li></ul><p>对称就是“基于某种操作下的不变性”。</p><ol><li>正方形绕中心点旋转90度、180度、270度、360度是不变的，因此我们叫这种对称为中心对称。正方形沿对角线对折可以重合，这可以等价为正方形绕对角线旋转180度、360度是不变的。同样的绕着中垂线旋转正方形也是不变的。</li><li>从(i)中可知，正方形的三种对称的唯一区别就是三组操作不同：<code>&#123;“绕中心点旋转n* 90度”，“绕对角线旋转n* 180度”，“绕着中垂线旋转n* 180度”&#125;</code>对此我们可以进一步还原——将正方形换成长宽相等的十字架、圆等形状同等操作下的对称性仍然成立，根据胡塞尔的本质还原理论，我们可以进一步将形状从对称的本质领域剔除，因此还原得到的对称的本质就只剩下“操作”了。</li><li>根据(ii)中的结论，是“操作”使某一种对称成为了那种对称。在此基础上我们继续看物理定律的对称，物理定律从古到今是不变的，因此物理定律的对称是基于时间的对称。历史在现在及未来是不变的，因此历史基于现在及未来的时间是对称的；</li></ol></li><li><p>对称的数学表示</p><ul><li>我们要描述的是某一种对称的本质，根据(1)中的结论，我们要描述的就是某一种“操作”，那么接下来我们进一步对“操作”进行分析；</li><li>我们还是用一个例子进行直观，那(1)中的(ii)中集合的第一个元素“绕中心点旋转n* 90度”进行分析；</li><li>这个操作包含了两部分：一个动作“绕中心点旋转”+动作的量n*90度；</li><li>“绕中心点旋转”是共同部分，但由于剔除这部分会导致无法识别对称，因此我们要保留这部分语义，而第二部分由于涉及量，我们就可以定义运算；</li><li>于是我们得到这样一种表达：0表示绕中心点旋转0度，r表示绕中心点旋转90度，2r表示绕中心点旋转180度，3r表示270度递增，由此我们得到一个操作集合<code>G=&#123;0, r, 2r, 3r&#125;</code>并且我们发现当旋转270度后再旋转90度又相当于旋转了0度；</li><li>而基于这个集合可以发现不同操作的量之间是加法关系，因此定义的运算为抽象的加法；</li><li>同理我们还可以得到另一种操作集合<code>H=&#123;1, r, r^2, r^3&#125;</code>，那么基于这个集合操作的量之间的关系，我们定义抽象乘法操作；</li></ul></li><li><p>群的定义</p><ol><li><p>根据(2)的结论，对于对称的描述需要一个操作集合和一个基于这个集合的运算，我们把这两部分合起来用字母定义就得到了群；</p></li><li><p>假设操作集合用G表示，抽象运算用  ·表示，那么(G, ·)就表示一个对称；</p></li><li><p>由(2)知，这个对称还有如下性质：</p><ul><li>G中的任意两个元素做·运算得到的元素必还存在于G中——封闭性；</li><li>G中的三个元素做·运算满足结合律；</li><li>存在一个单位元e，它和任意元素做运算都会得到这个元素自身；</li><li>任何一个元素都存在逆元，即a·b&#x3D;e，a和b互为逆元；</li></ul></li><li><p>我们把满足上面四条的(G, ·)成为群；</p></li></ol></li><li><p>群的同构</p><ol><li>从(2)中对正方形中心对称的两种表达，即(G, +)和(H, *)开看，虽然集合的内容和定义的运算不同，但他们却有着相同的内涵——同一种结构的对称，可知这两个群是具有某种同一性的，我们称之为同构；</li></ol></li><li><p>多项式方程根的加法和乘法结果的对称</p><ul><li>我们那一元二次方程ax^2+bx+c&#x3D;0来就来举例，根据韦达定理我们知道x1+x2&#x3D;-b&#x2F;a, x1*x2&#x3D;c&#x2F;a;</li><li>由此我们得到了这个一元二次方程的根的加法和乘法在互换加数和乘数的情况下结果是不变的，即x2+x1&#x3D;x1+x2, x1<em>x2&#x3D;x2</em>x1；</li><li>并且我们还可以进一步排除方程具体性的影响，即换一个方程上面的等式还成立，由此我们就得到了一元二次方程加法和乘法结果的对称，这种对称的本质是“互换”操作；</li><li>我们把这个对称表达出来，就是<code>G=&#123;0, r&#125;</code>分别表示互换0次，互换1次，互换两次又回到了0次，因此定义的运算是加法，我们得到了一个群(G, +);</li><li>这个群就是著名的伽罗瓦群，关于伽罗瓦理论的提出和具体内容见下一篇；</li></ul></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Mathematics</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/04/08/hello-world/"/>
    <url>/2022/04/08/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
