<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Interview-Database</title>
    <link href="/2022/04/23/Interview-Database(1)/"/>
    <url>/2022/04/23/Interview-Database(1)/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Rudimentary Skills of Computer Science</title>
    <link href="/2022/04/20/Interview-Rudimentary-Skills-of-Computer-Science(1)/"/>
    <url>/2022/04/20/Interview-Rudimentary-Skills-of-Computer-Science(1)/</url>
    
    <content type="html"><![CDATA[<ol><li>GC过程：<ol><li>JVM将堆内存分为两部分：<ol><li>新生代：分为伊甸园—幸存区From—To；</li><li>老年代；</li></ol></li><li>伊甸园满了——Minor GC采用复制算法把存活对象放入To中，幸存对象寿命+1，清空伊甸园，From和To互换；</li><li>伊甸园又满了——把伊甸园和From中的对象都放到To中，再清空伊甸园和From，From和To互换；</li><li>又来个对象，把新生代回收完也放不下了，老年代也放不下，触发Full GC，从新生代到老年代都要回收。</li><li>Minor GC会触发Stop the World，暂停用户线程；</li><li>寿命保存在对象头中，用4bits表示，因此最大寿命是15；</li><li>大对象直接晋升到老年代；</li><li>一个线程内的outOfMemory不一定会使Java线程结束；</li></ol></li><li>创建线程的方式：<ol><li>继承Thread类并重写run方法；</li><li>实现Runnable接口并重写run方法；</li><li>实现Callable接口并实现call()方法，使用FutureTask类来包装Callable对象；</li></ol></li><li>创建线程池的方式：<ol><li>线程池的好处：<ol><li>关键词：减少——时间、系统资源占用——资源不足——大量同类线程——内存——过渡切换。</li><li>线程池的好处在于可以减少创建和销毁线程所需要的时间和系统资源的开销，解决资源不足的问题。如果不使用线程池，有可能造成系统创建大量同类线程而导致消耗完内存或者“过渡切换”的问题。</li></ol></li><li>Executors创建线程池，由于底层的阻塞队列使用的是LinkedBlockQueue实现的，而LinkedBlockQueue的最大长度为Integer.MAX_VALUE，当我们不设置线程池容量时就意味着可以添加如此多的任务而导致OutOfMemory——可以使用ThreadPoolExecutor来指定BlockQueue的容量。</li><li>Executors创建线程的四种方式：<ol><li>newCachedThreadPool：可缓存线程池，线程池无限大。</li><li>newFixedThreadPool：定长线程池，可控制最大并发数，超出的线程会在队列中等待。</li><li>newScheduledThreadPool：定长线程池，支持定时及周期性任务执行。</li><li>newSingleThreadPool：单线程化的线程池，它会用唯一的工作线程来执行任务，保证所有任务按照指定优先级来执行。</li></ol></li></ol></li><li>TCP四次回收中closewait和timewait的作用：<ol><li>closewait是服务器在告诉客户端自己成功接收到释放连接的请求后，由于自己还可能有一些数据没有传送完成而进入的状态。</li><li>timewait是客户端在告诉服务器自己成功接收到服务器释放连接的请求后，考虑到由于客户端确认报文丢失而引起服务器超时重传，如果此时客户端已经关闭，就会用RST包来响应服务器，这会让服务器认为有错误发生。</li><li>timewait的问题：在高并发短连接的情况下，服务器可能会有多个连接处于timewait状态，这有可能会导致连接占用的文件描述符达到上限而无法继续建立正常连接。</li></ol></li><li>cookie和session有哪些区别？<ol><li>cookie是保存在浏览器端的用于保存用户信息的数据，会在浏览器向服务器发送请求时被携带发送在服务器上。通常它用于告知服务端两个请求是否来自同一浏览器，通常有以下三方面用途：<ol><li>回话状态管理：用户登录状态、购物车、游戏分数或者其他需要记录的信息。</li><li>个性化信息：用户自定义设置、主题等等。</li><li>浏览器行为跟踪：跟踪分析用户行为等。</li></ol></li><li>session代表着服务器和客户端一次回话的过程，session对象存储特定用户会话所需要的属性及配置信息。这样，当用户在应用程序的web页之间跳转时，存储在session对象中的变量不会消失。当浏览器关闭会话或者session超时失效时会话结束。</li><li>cookie和session的区别：<ol><li>作用范围不同：cookie保存在客户端，session保存在服务端；</li><li>存取方式不同：cookie只能保存ASCII码，session可以保存任意的数据类型。</li><li>有效期不同：cookie可以设置为长时间保持，比如我们经常使用的默认登录功能，session一般失效时间较短，客户端关闭或者session超时都会失效。</li><li>隐私策略不同：cookie存储在客户端容易遭到不法窃取，session存储在服务端安全性好一些；</li><li>存储大小不同：单个cookie保存的数据不能超过4K，session可以存储的数据远高于cookie；</li></ol></li><li>为什么需要cookie和session，他们有什么关联？<ol><li>浏览器使用的HTTP协议的无状态性导致浏览器不知道正在使用他们的是谁，通过cookie和session的配合可以告诉服务器本次操作的用户是否登录、是哪个用户在操作。</li><li>cookie和session的配合流程：<ol><li>用户第一次请求服务器的时候，服务器根据用户提交的信息，创建对应的session，请求返回时将此session的唯一标识信息SessionID返回给客户端，客户端接收后将此信息存储在cookie中并同时记录此SessionID所属的域名。</li><li>用户第二次访问服务器的时候，请求会自动判断此域名是否存在cookie信息，如果存在会将cookie发送给服务端，服务端从中获取SessionID，据此查找相应的session，如果没有证明用户没登录或登录失败，找到则说明用户已登录并且可移执行后续操作。</li></ol></li></ol></li><li>如果浏览器禁止cookie，那么怎么保障整个机制的正常运转？<ol><li>第一种方案可以在请求后携带SessionID参数；</li><li>第二种方案可以采用Token机制。Token是服务端生成的一个字符串作为客户端请求的标识，第一次用户登录后服务器产生一个Token交给客户端，以后的每次请求都携带这个Token就好而无需再次登录验证。</li></ol></li><li>分布式session问题，多台服务器共同支撑前端用户请求，用户两次访问服务端连接到的是不同的服务器，那么session怎么保证有效？<ol><li>可以将每个请求按照访问IP的hash分类，这样来自同一IP固定访问一个服务器。</li><li>session复制：当一个服务器的session改变之后，该节点会将session序列化广播给所有服务器。</li><li>共享session：服务端无状态化，将用户的session等信息采用缓存中间件统一管理。</li></ol></li></ol></li><li>Java中的锁有哪些？</li><li>ReentrantLock和synchronized有什么区别？</li><li>ConcurrentHashMap是怎么保证线程安全的？</li><li>mysql索引的最左匹配：</li><li>mysql事务：</li><li>mysql什么情况下会加锁？</li><li>select语句没有走索引，有哪些原因？</li><li>动态代理的实现？</li><li>深拷贝与浅拷贝：</li><li>Java中volatile关键字：<ol><li>变量的可见性保证：两个线程分别在不同的核中运行时会把内存中的共享变量读取到各自的cache中，因此某个线程改变变量之后由于cache写策略的不同可能导致另一线程对于本线程的更改不可见，因此会使用volatile关键字保证变量可见性。<ol><li>在读取volatile变量时，线程中所有在volatile之后的变量都会重新从内存中读取到cache，而volatile之前的变量由于没有解释器没有检查到volatile关键字因此还是从cache中读取，可能不是最新值；</li><li>在写入volatile变量时，线程中所有在volatile之前的变量都会从cache写入内存，而volatile之后的变量由于解释器没有检测到这个关键字，因此不会故意触发写直达的策略；</li></ol></li><li>happens-before保证：指令重排的情况下，happens-before原则保证以下两点：<ol><li>排在volatile之前的写指令不能重排序到volatile之后；</li><li>排在volatile之后的读指令不能重排序到volatile之前；</li></ol></li><li>综上所述，volatile关键字提供的是读写原则：<ol><li>从volatile开始的所有读都是从内存读而不是从cache读；</li><li>发现volatile关键字需要写变量时将cache中的内容更新到内存中；</li><li>在这两个原则的基础上可以实现上述两个功能；</li></ol></li><li>cache的读写策略的转换应该是操作系统层面的功能，JVM应该是调用了操作系统的接口来实现一下的功能：<ol><li>不从cache读而从内存读，读完更新cache；</li><li>将cache的内容写入内存；</li></ol></li></ol></li><li>Java序列化机制：<ol><li>将对象转化为字节流存储在磁盘用于网络运输或者独立于进程保存；</li><li>可以实现Serializable接口，用ObjectOutputStream类的writeObject方法序列化，但是这个类中的成员必须也是可序列化的；</li><li>序列化是不会将同一个对象重复序列化；</li><li>可以使用transient关键字修饰那些可序列化类中不想序列化的对象；</li></ol></li><li>https对称加密和非对称加密的详细过程：<ol><li>对称加密：加密和解密用一把钥匙，对称加密如果秘钥被劫持会导致信息不安全；</li><li>非对称加密：用公钥加密的信息需要私钥解开，用私钥加密的信息需要公钥解开，非对称加密中一方保存私钥，发送公钥，则即使公钥被劫持也只能解密由私钥加密的传输信息而无法解密由公钥加密的传输信息——非对称加密可以保证单个方向传输的安全性；</li><li>由于非对称加密可以保证单方向传输的安全性，可以采用非对称加密从浏览器向服务器传输加密的对称秘钥——服务器将公钥明文传输给浏览器，浏览器生成对称秘钥，用公钥加密后传送给服务器，此时即使被劫持也无法获取到秘钥。然后两方用这个秘钥加密信息进行通信。</li><li>中间人攻击：劫持服务器发送给浏览器的公钥A，替换为公钥B发送给浏览器，浏览器用公钥B加密对称秘钥X之后，中间人就可以用私钥B&#96;解密得到X，再将X用公钥A加密发送给浏览器，如此中间人就获得了对称秘钥X；</li><li>数字证书：网站在使用HTTPS之前需要向CA机构申领一份数字证书，数字证书中含有证书持有者信息。公钥信息等，服务器会把证书传送给浏览器，浏览器从证书中获取公钥。</li><li>如何防止数字证书被篡改？<ol><li>运用数字签名：<ol><li>服务端用数据生成散列值并用自己的私钥加密形成签名附加到数据之后，由于运用的是私钥因此中间人无法改变数据后重新生成签名。</li><li>浏览器用公钥解密签名得到散列值并自己用数据生成散列值查看二者是否相同，一致则数字签名有效。</li></ol></li><li>中间人不可能掉包证书：由(a)知中间无法更改证书内容，因此如果掉包，那么浏览器只需要对比证书上的域名和自己申请访问的域名就知道证书有没有被掉包了。</li></ol></li></ol></li><li>HTTP三次握手就是TCP三次握手；</li><li>输入URL后浏览器响应的过程：<ol><li>输入地址：浏览器在历史记录、书签等地方搜索到已输入字符串可能对应的URL，然后提示补全。Chrome浏览器甚至会从缓存中把网页展示出来，此时我们还没有回车，网页就展示出来了。</li><li>请求发起后，浏览器需要解析域名，如果本地hosts文件没有找到对应的IP地址，浏览器就会发送DNS请求到本地DNS服务器——一般是ISP，比如中国电信、中国移动等；</li><li>本地DNS服务器首先查询缓存，如果有这条记录就直接返回结果，这个过程是递归式查询。如果没有记录就询问DNS根服务器；</li><li>根服务器没有的话就会告诉本地DNS服务器去域服务器上查询，并给出地址，这个过程是迭代的；</li><li>本地DNS向域服务器发出请求，域服务器告诉本地DNS服务器它所请求的域名的解析服务器的地址；</li><li>本地DNS服务器向解析服务器发送请求，获得IP地址，然后将此地址返回给浏览器，并保存在自己的缓存中；</li><li>浏览器会以一个随机端口向服务器的80端口发送TCP连接请求，这个请求到达服务器进入网卡，进入TCP&#x2F;IP协议栈、防火墙最终进入WEB程序，处理请求。</li></ol></li><li>TCP拥塞控制：<ol><li>慢开始——由于一开始不知道网络的负荷情况，为了避免大量的数据字节传送进网络，因此采用从小到大增加拥塞窗口的策略，即从1开始每次乘2；</li><li>拥塞避免——当窗口大小达到阈值之后采用线性增长。当达到拥塞时，此时将新的慢开始的阈值变为此时窗口值的一半，并将窗口重新变为1。</li></ol></li><li>TCP流量控制：</li><li>InnoDB特性，B树和B+树的区别：</li><li>乐观锁和悲观锁：<ol><li>悲观锁：每次更新数据时都会认为别人会抢占数据进行更改；</li><li>乐观锁：访问数据认为不会有人抢占数据，等到更新的时候再判断这个数据是否被更改；</li></ol></li><li>mysql主从复制：</li><li>HTTP中POST和GET的区别：</li><li>自旋锁和互斥锁有什么区别？</li><li>String、StringBuffer和StringBuilder之间的区别？</li><li>TCP&#x2F;IP参考模型：<ol><li>应用层：OSI参考模型中的会话层、表示层、应用层功能合并到应用层实现，协议有FTP、Telnet、DNS、SMTP、HTTP等；</li><li>传输层：TCP、UDP；</li><li>网络互联层：网络层，IP、IGMP、ICMP；</li><li>网络接入层：对应于OSI的物理层和链路层。TCP&#x2F;IP并未真正描述这一层，而是由参与互联的各网络使用自己的物理层和链路层协议，然后与TCP&#x2F;IP的网络接入层连接；</li></ol></li><li>Java中的反射机制：</li><li>进程和线程的区别：<ol><li>进程是操作系统分配资源的最小单位；</li><li>线程是进程的一部分，描述指令流执行状态。它是进程中指令执行流的最小单元，是CPU调度的最小单位；</li><li>线程&#x3D;进程-共享资源（代码段、数据段、打开文件）</li><li>进程拥有一个完整的资源平台而线程只独享指令流执行的必要资源如寄存器和栈；</li><li>线程能够减少并发执行的时间和空间开销<ol><li>线程的创建和销毁比进程需要的时间短；</li><li>同一进程内线程的切换比进程短；</li><li>由于同一进程内各线程间共享内存和文件资源，可以不通过内核进行直接通信；</li></ol></li></ol></li><li>进程通信的方式：<ol><li>直接通信：两个进程之间建立一对一的链路；</li><li>间接通信：通过操作系统维护的消息队列实现进程间的消息接收和发送；<ol><li>每个消息队列都有一个唯一标识；</li><li>只有共享了相同消息队列的进程才能通信；</li></ol></li><li>几种具体的实现方式：<ol><li>信号：进程之间的软中断通知和处理机制；</li><li>管道：进程间基于内存文件的通信机制；</li><li>消息队列；</li><li>共享内存：把同一个物理内存区域同时映射到多个进程的内存地址空间；</li></ol></li></ol></li><li>Telnet协议：</li><li>虚拟内存：</li><li>内核态和用户态解释一下：</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Computer Science</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Relation</title>
    <link href="/2022/04/17/Relation/"/>
    <url>/2022/04/17/Relation/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
    <tags>
      
      <tag>Mathematics</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Poetry(1)</title>
    <link href="/2022/04/17/Poetry/"/>
    <url>/2022/04/17/Poetry/</url>
    
    <content type="html"><![CDATA[<div class="code-wrapper"><pre><code class="hljs">                               时时灌溉，常教玉树气回根。                               日日栽培，莫使金花精脱蒂。                                                        保神养气谓之精，情性原来一禀形。                            心乱神昏诸病作，形衰精败道元倾。                            三花不就空劳碌，四大萧条枉费争。                            土木无功金水绝，法身疏懒几时成！                            归根复命是还丹，养到纯阳再换坛。                            不晓个中消息意，圣基虽入道难完。                            阳极阴生姤即连，此中消息要师传。                            含章在内神功妙，知者夺来造化权。                            金液还丹教外传，五行四象火功全。                            求师诀破其中奥，了悟源流好上船。                            人生在世是浮沤，背理违天谁肯休。                            任尔堆金多积玉，怎能买得命长留。                            存诚去妄法虽良，究竟难逃生死乡。                            何若金丹微妙诀，超凡入圣了无常。                            火生于木本藏锋，不会钻研莫强攻。                            祸发总由斯害己，要须制服觅金公。                            真阳不在肾中藏，强闭阴精非妙方。                            会得神观微妙法，消除色欲不张遑。                            心动意迷志不专，修行往往被他牵。                            劝君戒惧勤防备，莫起风尘障道缘。                            大地仙乡列圣曹，蓬莱分合镇波涛。                            瑶台影蘸天心冷，巨阙光浮海面高。                            五色烟霞含玉籁，九霄星月射金鳌。                            西池王母常来此，奉祝三仙几次桃。                            方丈巍峨别是天，太元宫府会神仙。                            紫台光照三清路，花木幽浮五色烟。                            金凤自多槃蕊阙，玉膏谁逼灌芝田。                            碧桃紫李新成熟，又换仙人信万年。                            一日清闲自在仙，六神和合保平安。                            丹田有宝休寻道，对境无心莫问禅。                            弃却瓢囊摵碎琴，如今不恋水中金。                            自从一见黄龙后，始觉从前错用心。</code></pre></div>]]></content>
    
    
    
    <tags>
      
      <tag>Poetry</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Graham-Scan</title>
    <link href="/2022/04/17/Graham-Scan/"/>
    <url>/2022/04/17/Graham-Scan/</url>
    
    <content type="html"><![CDATA[<ol><li><p>前言——两种态度：</p><ol><li>自然态度：接受前提并继续思考；</li><li>哲学态度：反思前提并继续颠覆——怀疑的美妙；</li></ol></li><li><p>Convex hull：</p><ol><li>输入：平面上的n个点的集合Q；</li><li>输出： CH(Q): Q的convex hull；</li><li>Q的convex hull是一个最小凸多边形P，Q的点或者在P上或者在P内；</li><li>凸多边形P是具有如下性质多边形：连接P内任意两点的边都在P内</li></ol></li><li><p>Graham Scan：</p><ol><li>选取一个点作为极点，将所有点按照与极点形成的极角由小到大排序；</li><li>从极点开始选取凸包边界点：<ol><li>用栈保存遍历到当前节点的过程中凸包边界的候选点；</li><li>每次遍历选取栈顶第二个节点作为极点，将栈顶节点与极点形成的极角和遍历节点与极点形成的极角作比较：<ol><li>当前者大于后者时，删除栈顶节点；</li><li>当前者小于后者时，保留栈顶节点；</li><li>当前者等于后者时，如果栈顶节点的极径大于遍历节点的极径则保留栈顶节点，否则删除；</li></ol></li><li>遍历节点入栈，成为新的栈顶；</li><li>直到遍历结束，栈中节点就是凸包边界点的集合；</li></ol></li><li>初始化栈，极点和极角最小的节点；</li></ol></li><li><p>算法过程中点的关系：</p><ol><li>遍历过程中每一个点都进入了栈成为了凸包边界候选点；</li><li>每次循环过程中只做了一件事：借助栈顶第二个节点和遍历到的当前节点决定栈顶节点的去留；</li><li>遍历的顺序是节点与极点形成的极角的递增顺序；</li><li>算法的不变性是每次循环开始时栈中节点形成了遍历序列中当前遍历节点之前的点集的凸包；</li></ol></li><li><p>考察算法的思考过程：</p><ol><li>首先确定遍历顺序，将人为解决问题方法中的遍历顺序用极角表达；</li><li>确定循环中每个点去留所取决的因素；</li><li>本算法中遍历到的节点不是作为待操作节点而存在，而是作为待操作节点选择操作的判断条件而存在，这是因为凸包边界节点的选取进度和遍历进度不一致却又相关而导致的——即我们当前需要考虑是否在凸包中的节点可能是P2而遍历到的节点可能是P5；</li><li>当我们用数学概念（极坐标系）配合数学操作（计算、比较大小）表达人为解决问题的方法时，出现了如下情况可以采用的方法：<ol><li>结果集递增的速度和问题集遍历的速度不一致，可以采用判断（if语句）使两者匹配，此时循环中操作的量即是遍历到的量；</li><li>随着问题集的遍历（问题规模的递增），结果集中的某些元素会出现不确定性，本算法中是最新加入结果集中的元素的保留与否随着问题集的递增具有不确定性，此时循环中操作的变量是结果集中具有不确定性的元素；</li><li>以上两种情况的不同点在于结果集和问题集规模变化过程的关系：同步递增、异步递增、规模变化非单调（Graham Scan算法中随着问题集规模的递增会出现结果集规模递减的现象，而这种递减在每次循环中最多是1）；</li><li>(c)中的着眼点在于问题解决过程中问题集和结果集规模变化的关系；</li></ol></li></ol></li><li><p>结论：根据（5）中结论，我们在程序设计过程中为了确定程序在问题集递增过程中的具体操作可以着眼于问题集递增对于结果集的每次递增的影响；</p></li><li><p>考察算法思考过程中运用了理性的哪些内涵：</p><ol><li>我们为什么要如上方式地确定遍历顺序？<ol><li>一种回答是因为这能解决问题，但我们在确定这种顺序时并不确定问题可以因此得到解决。我们没有理由的选择“按照某种顺序一个个考察问题集中的节点”，比如本算法的按照二维空间边界的顺序（数学上表达为极角），再比如按照大小顺序、排列顺序，即便是我们所谓的不按顺序也可以理解为“按随机顺序”，总之我们必须一个一个地考察问题集中的节点，这是最根本的前提，也就是我们的理性总是解析式的考察问题，这是由于理性具有分辨性质的缘故，因此确定问题集规模递增的顺序是第一步；</li><li>何为顺序？顺序的产生是基于量的性质和时空性质，比如我们常见的大小顺序就是基于量，先后顺序是基于时空，而在数学的帮助下，空间可以被我们量化表达，即空间观念和量的观念可以被思维的同一性关联起来（或者说空间观念和量观念的构成中具备了相同的理性因素）</li><li>空间观念中的基本观念：<ol><li>位置观念：<ol><li>点的位置可以借助各种坐标系表达；</li><li>线的位置可以借助方程表达；</li><li>形的位置可以借助什么表达呢？</li></ol></li></ol></li></ol></li></ol></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Computer Science, Philosophy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Stream in Java</title>
    <link href="/2022/04/12/Stream-in-Java/"/>
    <url>/2022/04/12/Stream-in-Java/</url>
    
    <content type="html"><![CDATA[<ol><li>流是什么：<ol><li>流是支持数据处理操作的源生成的元素序列，源可以是数组、文件、集合、函数。流不是数据结构并不保存数据，它的主要目的在于计算。</li></ol></li><li>流的生成：<ol><li>通过集合生成：<code>Stream&lt;Integer&gt; steam=new ArrayList&lt;Integer&gt;().stream();</code> </li><li>通过数组生成：<code>IntStream stream=Arrays.stream(new int[]&#123;1,2,3&#125;);</code></li><li>通过值生成：<code>Stream&lt;Integer&gt; stream=Stream.of(1,2,3,4,5,6);</code></li><li>通过文件生成：<code>Stream&lt;Integer&gt; stream=Files.lines(Paths.get(&quot;data.txt&quot;), Charset.defaultCharset());</code></li><li>通过函数生成：<code>Stream&lt;Integer&gt; stream=Stream.iterate(0, n-&gt;n+2).limit(5);</code>iterate()方法 接受两个参数，第一个是初始化值，第二个为进行的函数操作，因为iterate生成的是无限流，通过limit方法对流进行了截断；</li><li>generator：<code>Stream&lt;Double&gt; stream=Stream.generate(Math::random).limit(5);</code></li></ol></li><li>流的操作类型：<ol><li><p>中间操作：</p><ol><li>filter：条件筛选  <figure class="highlight apache"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">List</span>&lt;Integer&gt; list=Arrays.asList(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>);<br><span class="hljs-attribute">Stream</span>&lt;Integer&gt; stream=list.stream().filter(i-&gt;i&gt;<span class="hljs-number">3</span>);<br><span class="hljs-attribute">result</span>:<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span><br></code></pre></td></tr></table></figure></li><li>distinct：去除重复元素；</li><li>limit：返回指定流的个数；</li><li>skip：跳过流中的元素；</li><li>map：流映射——将接受的元素映射为另一个元素  <figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-built_in">List</span><span class="hljs-operator">&lt;</span><span class="hljs-built_in">String</span><span class="hljs-operator">&gt;</span> <span class="hljs-variable">list</span><span class="hljs-operator">=</span><span class="hljs-built_in">Arrays</span><span class="hljs-operator">.</span><span class="hljs-variable">asList</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;Java 8&quot;</span><span class="hljs-operator">,</span><span class="hljs-string">&quot;Lambdas&quot;</span><span class="hljs-operator">,</span><span class="hljs-string">&quot;In&quot;</span><span class="hljs-operator">,</span><span class="hljs-string">&quot;Action&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><br><span class="hljs-built_in">List</span><span class="hljs-operator">&lt;</span><span class="hljs-built_in">Integer</span><span class="hljs-operator">&gt;</span> <span class="hljs-variable">length</span><span class="hljs-operator">=</span><span class="hljs-variable">list</span><span class="hljs-operator">.</span><span class="hljs-variable">stream</span><span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-operator">.</span><span class="hljs-variable">map</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">String</span><span class="hljs-string">::length</span><span class="hljs-punctuation">)</span><span class="hljs-operator">.</span><span class="hljs-variable">collect</span><span class="hljs-punctuation">(</span><span class="hljs-variable">Collectors</span><span class="hljs-operator">.</span><span class="hljs-variable">toList</span><span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><br><span class="hljs-variable">result</span><span class="hljs-operator">:</span><span class="hljs-punctuation">[</span><span class="hljs-number">6</span><span class="hljs-operator">,</span><span class="hljs-number">7</span><span class="hljs-operator">,</span><span class="hljs-number">2</span><span class="hljs-operator">,</span><span class="hljs-number">6</span><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure></li><li>flatMap：流转换——将一个流中的每个值都转换为另一个流；</li><li>allMatch：匹配所有元素  <figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">List&lt;Integer&gt; <span class="hljs-built_in">list</span>=<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Arrays</span>.</span></span><span class="hljs-keyword">as</span><span class="hljs-constructor">List(1,2,3,4,5)</span>;<br><span class="hljs-built_in">list</span>.stram<span class="hljs-literal">()</span>.all<span class="hljs-constructor">Match(<span class="hljs-params">i</span>-&gt;<span class="hljs-params">i</span>&gt;3)</span>;<br>result:<span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure></li><li>anyMatch：匹配一个元素</li><li>noneMatch：全部不匹配</li></ol></li><li><p>终端操作：</p><ol><li>count：计算流中元素个数；</li><li>findFirst：查找第一个；</li><li>findAny：随机查找一个；</li><li>reduce：将流中的元素组合<ol><li>用于求和<code>int sum=list.stream().reduce(0, Integer::sum);</code></li></ol></li><li>min&#x2F;max：获取最大最小值；</li><li>sum：求和；</li><li>averagingXXX：求平均值；</li><li>forEach：遍历</li><li>joining拼接流中的元素 <figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-built_in">String</span> result=<span class="hljs-built_in">list</span>.stream().<span class="hljs-built_in">map</span>(<span class="hljs-built_in">String</span><span class="hljs-type">::toLowerCase</span>).collect(Collectors.joining(<span class="hljs-string">&quot;-&quot;</span>));<br></code></pre></td></tr></table></figure></li></ol></li></ol></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Conputer Science, Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Recursion and iteration</title>
    <link href="/2022/04/10/Recursion-and-iteration/"/>
    <url>/2022/04/10/Recursion-and-iteration/</url>
    
    <content type="html"><![CDATA[<figure class="highlight markdown"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">156.</span> 给你一个二叉树的根节点 root ，请你将此二叉树上下翻转，并返回新的根节点。<br><br>你可以按下面的步骤翻转一棵二叉树：<br><br><span class="hljs-code">    原来的左子节点变成新的根节点</span><br><span class="hljs-code">    原来的根节点变成新的右子节点</span><br><span class="hljs-code">    原来的右子节点变成新的左子节点</span><br><span class="hljs-code"></span><br>上面的步骤逐层进行。题目数据保证每个右节点都有一个同级节点（即共享同一父节点的左节点）且不存在子节点。<br><br></code></pre></td></tr></table></figure><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs fsharp"><span class="hljs-keyword">class</span> Solution &#123;<br>    <span class="hljs-keyword">public</span> TreeNode upsideDownBinaryTree(TreeNode root) &#123;<br>        <span class="hljs-keyword">if</span>(root<span class="hljs-operator">==</span><span class="hljs-literal">null</span>)<br>            <span class="hljs-keyword">return</span> root;<br>        TreeNode res<span class="hljs-operator">=</span><span class="hljs-keyword">new</span> TreeNode(root.<span class="hljs-keyword">val</span>);<br>        <span class="hljs-keyword">while</span>(root.left<span class="hljs-operator">!=</span><span class="hljs-literal">null</span>)&#123;<br>            res<span class="hljs-operator">=</span>root.right<span class="hljs-operator">!=</span><span class="hljs-literal">null</span><span class="hljs-operator">?</span><span class="hljs-keyword">new</span> TreeNode(root.left.<span class="hljs-keyword">val</span>, <span class="hljs-keyword">new</span> TreeNode<br>                (root.right.<span class="hljs-keyword">val</span>), res)<span class="hljs-operator">:</span><span class="hljs-keyword">new</span> TreeNode(root.left.<span class="hljs-keyword">val</span>, <span class="hljs-literal">null</span>,<br>                res);<br>            root<span class="hljs-operator">=</span>root.left;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>受本题启发在这里总结关于迭代和递归过程中问题规模递减的顺序和迭代&#x2F;递归过程顺序的关系。</p><ol><li>对于本而言考虑这组输入：<code>root = [1,2,3,4,5]</code>；</li><li>本题问题规模递减的顺序是：<ol><li>生成子树<code>[2,3,1]</code>；</li><li>生成子树<code>[4,5,2,null,null,3,1]</code>；</li></ol></li><li>由(2)可知，问题解决的顺序与遍历的顺序是相同的，都是从前往后&#x3D;&gt;迭代解决；</li></ol><p>在来考虑递归的解决顺序：</p><ol><li><p>自顶向下的递归：当前问题在被遍历到的时候就已经计算进答案中；</p><ol><li>问题的解决顺序与遍历的顺序是相同的；</li></ol></li><li><p>自底向上的递归：当前问题在子问题解决的基础上解决，因此递归到更小的子问题然后根据更小子问题的返回值解决当前问题；</p><ol><li>解决问题的顺序和遍历的顺序相反；</li></ol></li><li><p>(1)和(2)两种递归的区别：</p><ol><li>有返回值的情况：<ul><li>自顶向下return recursion(n-1)——问题规模递减到最小时可以得到最终的答案，返回上一层时不需要做进一步处理;</li><li>自底向上return f(recursion(n-1));——问题规模减小到最小时可以得到规模最小的子问题答案，返回上一层需要处理后才能得到高层次的答案；</li></ul></li><li>没有返回值的情况：<ul><li>自顶向下recursion(n-1);</li><li>自底向上由于需要子问题的结果作为当前问题的结果因此必须有返回值；</li><li>但是有一个特例，当传入引用类型的数据作为参数时，答案可以记录在这个引用变量里；</li></ul></li></ol></li><li><p>分析二叉树深度优先搜索的递归过程：</p> <figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-built_in">public</span> <span class="hljs-type">void</span> recursion(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> depth, <span class="hljs-type">boolean</span>[] isValid, Deque&lt;<span class="hljs-type">Integer</span>&gt; <span class="hljs-type">path</span>, List&lt;List&lt;<span class="hljs-type">Integer</span>&gt;&gt; res)&#123;<br>    <span class="hljs-keyword">if</span>(depth==nums.length)&#123;<br>        res.<span class="hljs-keyword">add</span>(<span class="hljs-built_in">new</span> ArrayList(<span class="hljs-type">path</span>));<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;nums.length;i++)&#123;<br>        <span class="hljs-keyword">if</span>(!isValid[i])&#123;<br>            <span class="hljs-type">path</span>.addLast(nums[i]);<br>            isValid[i]=<span class="hljs-keyword">false</span>;<br>            recursion(nums, depth+<span class="hljs-number">1</span>, isValid, <span class="hljs-type">path</span>, res);<br>            isValid[i]=<span class="hljs-keyword">true</span>;<br>            <span class="hljs-type">path</span>.removeLast();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>这个过程中不止涉及一个递归过程，循环的每一个分支都是一个递归过程，每个递归过程中递归到最后直接得到答案，因此每个分支的递归过程都是自顶向下的；</li><li>再看循环过程，循环过程的语义是选择，也就是操作树的分支；</li><li>本题是有分支的递归，两个分支具有相同的原问题，因此本题是自顶向下递归的变种，本质上还是自顶向下的递归；</li></ol></li><li><p>回头考虑156题，根据其问题规模递减的顺序和遍历顺序应该采用自顶向下的递归，因此由当前问题进入下一问题后得到的应该是最终的答案，即采用return recursion(n-1);</p>   <figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">public TreeNode recursion(TreeNode root, TreeNode right)&#123;<br>    <span class="hljs-keyword">if</span>(root==null)<br>     return right;<br>    <br>    TreeNode left=root.right!=null?<span class="hljs-keyword">new</span> <span class="hljs-constructor">TreeNode(<span class="hljs-params">root</span>.<span class="hljs-params">right</span>.<span class="hljs-params">val</span>)</span>:null;<br>    return recursion(root.left, <span class="hljs-keyword">new</span> <span class="hljs-constructor">TreeNode(<span class="hljs-params">root</span>.<span class="hljs-params">right</span>.<span class="hljs-params">val</span>, <span class="hljs-params">left</span>, <span class="hljs-params">right</span>)</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>   本文中对于递归不同种类的代码形式是重要的，可以帮助我们很快的组织代码；</p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Computer Science</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Speculation</title>
    <link href="/2022/04/10/Speculation/"/>
    <url>/2022/04/10/Speculation/</url>
    
    <content type="html"><![CDATA[<ol><li><p>什么是思辨？从一个方形桌子说起。当我们从方桌转向方形的时候，我们已经在试图把方桌概念中的经验性内容——桌子剔除了，剩下的就是作为形的性质的方。</p></li><li><p>当我们进入性质领域——一个比经验领域更加抽象的领域时，我们可以去追问方形和其他形之间的关系，那么就进入了几何学了。</p></li><li><p>但如果我们继续之前的思维方式——继续剔除概念中的经验性的东西，那么我们就会继续对方形进行解构从而试图进入纯粹理性的区域——思辨；</p></li><li><p>方形又是什么呢？由四条相等的线段组成的封闭的平面图形。</p></li><li><p>如果以(4)中的定义来展开分析就会得到下面的方形的本质中的因素：</p><ol><li>作为我们空间观念表达方式的抽象线条；</li><li>抽象线条的可度量性和以此为根据的可判等性；</li></ol></li><li><p>根据(5)中的结论我们可以继续追问：我们的空间观念中又包含了哪些经验性因素呢？抽象线条的可度量性的根据又从哪里来呢？</p></li><li><p>对于(6)中的追问我目前没有能力回答，因此暂时断言空间观念和空间的可度量性来源于理性的规定，即这些都是理性的组成部分；</p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Speculation</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Galois Theroy(1)</title>
    <link href="/2022/04/08/Galois-Theroy/"/>
    <url>/2022/04/08/Galois-Theroy/</url>
    
    <content type="html"><![CDATA[<ol><li><p>什么是对称？</p><p>为了获得这种艾多斯，我们从几个例子进行直观：</p><ul><li>正方形是对称的；</li><li>物理定律是对称的；</li><li>多项式方程根的加法和乘法的结果是对称的；</li></ul><p>对称就是“基于某种操作下的不变性”。</p><ol><li>正方形绕中心点旋转90度、180度、270度、360度是不变的，因此我们叫这种对称为中心对称。正方形沿对角线对折可以重合，这可以等价为正方形绕对角线旋转180度、360度是不变的。同样的绕着中垂线旋转正方形也是不变的。</li><li>从(i)中可知，正方形的三种对称的唯一区别就是三组操作不同：<code>&#123;“绕中心点旋转n* 90度”，“绕对角线旋转n* 180度”，“绕着中垂线旋转n* 180度”&#125;</code>对此我们可以进一步还原——将正方形换成长宽相等的十字架、圆等形状同等操作下的对称性仍然成立，根据胡塞尔的本质还原理论，我们可以进一步将形状从对称的本质领域剔除，因此还原得到的对称的本质就只剩下“操作”了。</li><li>根据(ii)中的结论，是“操作”使某一种对称成为了那种对称。在此基础上我们继续看物理定律的对称，物理定律从古到今是不变的，因此物理定律的对称是基于时间的对称。历史在现在及未来是不变的，因此历史基于现在及未来的时间是对称的；</li></ol></li><li><p>对称的数学表示</p><ul><li>我们要描述的是某一种对称的本质，根据(1)中的结论，我们要描述的就是某一种“操作”，那么接下来我们进一步对“操作”进行分析；</li><li>我们还是用一个例子进行直观，那(1)中的(ii)中集合的第一个元素“绕中心点旋转n* 90度”进行分析；</li><li>这个操作包含了两部分：一个动作“绕中心点旋转”+动作的量n*90度；</li><li>“绕中心点旋转”是共同部分，但由于剔除这部分会导致无法识别对称，因此我们要保留这部分语义，而第二部分由于涉及量，我们就可以定义运算；</li><li>于是我们得到这样一种表达：0表示绕中心点旋转0度，r表示绕中心点旋转90度，2r表示绕中心点旋转180度，3r表示270度递增，由此我们得到一个操作集合<code>G=&#123;0, r, 2r, 3r&#125;</code>并且我们发现当旋转270度后再旋转90度又相当于旋转了0度；</li><li>而基于这个集合可以发现不同操作的量之间是加法关系，因此定义的运算为抽象的加法；</li><li>同理我们还可以得到另一种操作集合<code>H=&#123;1, r, r^2, r^3&#125;</code>，那么基于这个集合操作的量之间的关系，我们定义抽象乘法操作；</li></ul></li><li><p>群的定义</p><ol><li><p>根据(2)的结论，对于对称的描述需要一个操作集合和一个基于这个集合的运算，我们把这两部分合起来用字母定义就得到了群；</p></li><li><p>假设操作集合用G表示，抽象运算用  ·表示，那么(G, ·)就表示一个对称；</p></li><li><p>由(2)知，这个对称还有如下性质：</p><ul><li>G中的任意两个元素做·运算得到的元素必还存在于G中——封闭性；</li><li>G中的三个元素做·运算满足结合律；</li><li>存在一个单位元e，它和任意元素做运算都会得到这个元素自身；</li><li>任何一个元素都存在逆元，即a·b&#x3D;e，a和b互为逆元；</li></ul></li><li><p>我们把满足上面四条的(G, ·)成为群；</p></li></ol></li><li><p>群的同构</p><ol><li>从(2)中对正方形中心对称的两种表达，即(G, +)和(H, *)开看，虽然集合的内容和定义的运算不同，但他们却有着相同的内涵——同一种结构的对称，可知这两个群是具有某种同一性的，我们称之为同构；</li></ol></li><li><p>多项式方程根的加法和乘法结果的对称</p><ul><li>我们那一元二次方程ax^2+bx+c&#x3D;0来就来举例，根据韦达定理我们知道x1+x2&#x3D;-b&#x2F;a, x1*x2&#x3D;c&#x2F;a;</li><li>由此我们得到了这个一元二次方程的根的加法和乘法在互换加数和乘数的情况下结果是不变的，即x2+x1&#x3D;x1+x2, x1<em>x2&#x3D;x2</em>x1；</li><li>并且我们还可以进一步排除方程具体性的影响，即换一个方程上面的等式还成立，由此我们就得到了一元二次方程加法和乘法结果的对称，这种对称的本质是“互换”操作；</li><li>我们把这个对称表达出来，就是<code>G=&#123;0, r&#125;</code>分别表示互换0次，互换1次，互换两次又回到了0次，因此定义的运算是加法，我们得到了一个群(G, +);</li><li>这个群就是著名的伽罗瓦群，关于伽罗瓦理论的提出和具体内容见下一篇；</li></ul></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Mathematics</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/04/08/hello-world/"/>
    <url>/2022/04/08/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
